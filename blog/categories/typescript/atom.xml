<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Typescript, | Contrast Of Beauty]]></title>
  <link href="http://blackat.github.io/blog/categories/typescript/atom.xml" rel="self"/>
  <link href="http://blackat.github.io/"/>
  <updated>2016-09-11T13:07:12+02:00</updated>
  <id>http://blackat.github.io/</id>
  <author>
    <name><![CDATA[black@t]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Furure of Declaration Files]]></title>
    <link href="http://blackat.github.io/blog/2016/09/11/furure-of-declaration-files/"/>
    <updated>2016-09-11T11:15:37+02:00</updated>
    <id>http://blackat.github.io/blog/2016/09/11/furure-of-declaration-files</id>
    <content type="html"><![CDATA[<p>When I have started to use TypeScript I have looked at <a href="http://definitelytyped.org/">Definitely Typed</a> to see how many  people where writing declaration files (<code>.d.ts</code>) and then <a href="https://typescript.codeplex.com/wikipage?title=Writing%20Definition%20%28.d.ts%29%20Files">guidelines from Microsoft</a> to see how to do it. There was then the utility <a href="https://github.com/DefinitelyTyped/tsd">tsd</a>, but now many stuff has changed.</p>

<!-- more -->


<h2>Evolution at Glance</h2>

<h3>TSD Package Manager</h3>

<p><blockquote><p>TSD is a package manager to search and install TypeScript definition files directly from the community driven DefinitelyTyped repository.</p><footer><strong>DefinitelyTyped <a href="https://github.com/DefinitelyTyped/tsd">https://github.com/DefinitelyTyped/tsd</a> TSD</strong></footer></blockquote></p>

<p>A tool has to be installed via <code>npm</code> to fetch the package and start to configure a file named <code>tsd.json</code> that holds all the declaration (or definition) files. Basically <code>tsd</code> is like <code>npm</code> with similar commands able to manage defintion dependencies used by TypeScript compiler to transpile <code>.ts</code> files and by type guard to perform runtime check.</p>

<p><blockquote><p>A type guard is some expression that performs a runtime check that guarantees the type in some scope.</p><footer><strong>TypeScript <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html">https://www.typescriptlang.org/docs/handbook/advanced-types.html</a> Documentation</strong></footer></blockquote></p>

<h3>Typings</h3>

<p>Some months go, looking at the <a href="https://github.com/DefinitelyTyped/tsd">GitHub repository</a>, I have discovered <a href="https://github.com/DefinitelyTyped/tsd/issues/269">the project has been deprecated</a> in favor of <a href="https://github.com/typings/typings">typings</a>. So <code>typings</code> is an evolution of <code>tsd</code> with some advantages explained <a href="https://github.com/typings/typings/issues/72">here</a> by <a href="https://github.com/blakeembrey">blakeembrey</a>.</p>

<p>Basically the previous tool has been improved into a more generic package manager that acts like <code>npm</code>, then it still requires to be installed. Old projects have to be updated to migrate from <code>tsd</code> if previously used. Slighter different syntax needs to be learnt.</p>

<h3>@Types</h3>

<p>Recently I was experimenting <a href="https://github.com/angular/angular-cli">Angular2 Command Line Interface</a> and I have noticed that generating a new project the folder <code>typings</code> was not created, something missing? Not at all, TypeScript 2.0 has improved once again and a new property <code>types</code> has been kicked in the <code>tsconfig.json</code>.</p>

<p>So looking at the <code>tsconfig.json</code> <a href="http://json.schemastore.org/tsconfig">schema definition</a> we can find
<code>json
types: {
  "description": "Type declaration files to be included in compilation. Requires TypeScript version 2.0 or later.",
  "type": "array",
  "items": {
    "type": "string"
  }
}
</code>
The evolution is explained in this post from <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/">Daniel Rosenwasser</a> Program Manager on TypeScript.</p>

<p>In a nutshell
<blockquote><p>Getting type declarations in TypeScript 2.0 will require no tools apart from npm.</p><footer><strong>Daniel Rosenwasser <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files">https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files</a> The future of declaration files</strong></footer></blockquote></p>

<p>Really a good news! we can rid off some extra entities in our project such as:</p>

<ul>
<li>another package managers then <code>npm</code>;</li>
<li><code>json</code> file for type declarations;</li>
<li>configure <code>tsconfig.json</code> to exclude files from <code>typings</code> folder;</li>
<li>the famous <code>///reference</code> at the beginning of each <code>.ts</code> file.</li>
</ul>


<h4>Usage</h4>

<p>Very simple:
<code>bash
npm install --save @types/lodash
</code></p>

<p><blockquote><p>From there youâ€™ll be able to use lodash in your TypeScript code with no fuss. This works for both modules and global code.</p><footer><strong>Daniel Rosenwasser <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files">https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files</a> The future of declaration files</strong></footer></blockquote></p>

<p>No more additional configuration or references at the beginning of each file.</p>

<h4>Type Search</h4>

<p>Please refer to <a href="http://microsoft.github.io/TypeSearch/">TypeSearch</a> search engine to find a type definition and how to install it via <code>npm</code>.</p>

<p>At first sight I could say the project is cleaner, less utilities and, may be, a more consistent way to manage <code>.d.ts</code> files. I hope a definitive path has been defined (at least for a couple of years) in order to have all the dependencies centralized in one place.</p>
]]></content>
  </entry>
  
</feed>
