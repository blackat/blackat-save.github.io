<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Proxy | Contrast Of Beauty]]></title>
  <link href="http://blackat.github.io/blog/categories/proxy/atom.xml" rel="self"/>
  <link href="http://blackat.github.io/"/>
  <updated>2015-01-28T18:29:42+01:00</updated>
  <id>http://blackat.github.io/</id>
  <author>
    <name><![CDATA[black@t]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Protection Proxy]]></title>
    <link href="http://blackat.github.io/blog/2013/03/22/protection-proxy-pattern/"/>
    <updated>2013-03-22T19:38:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/22/protection-proxy-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>It controls the access to a resource based on access rights.</p></blockquote></p>

<!-- more -->


<p><strong>Scenario.</strong> A proxy <em>controls the access</em> to the real object applying <em>protection</em> to the method calls in a transparent way. The client will invoke methods against the proxy thinking it is the real object.</p>

<p><strong>Java dynamic proxy support.</strong> <code>java.lang.reflect</code> package can be used to create a proxy class <em>on the fly</em>. The <em>proxy class</em> implements one or more interfaces and delegates method invocation to a  specified class, the <em>invoker handler</em>.</p>

<p><strong>Class diagram.</strong> The use of <code>java.lang.reflect</code> package imposes a change in the proxy pattern class diagram.
<img src="/images/posts/design-patterns/protection_proxy.jpg"></p>

<p><strong>Proxy in action.</strong> The handler answers to any method call made by the client on the proxy. The proxy implements <em>the same interface</em> as the real object.</p>

<h2>Example</h2>

<p>A reviewer can only get information about a movie and write comments, he cannot change the title or the actors of the movie.</p>

<h3>Start</h3>

<p>The <code>MovieReviews</code> class simply creates a of two movie proxies, each proxy manages one movie.
Using the <em>static method</em> <code>Proxy.newProxyInstance(Movie.class.getClassLoader(), new Class[]{Movie.class}, forrestGumpHandler);</code> allows the creation of a new proxy <em>on the fly</em> passing:</p>

<ul>
<li>the same class loader of the <code>Movie</code> interface or of the <em>real movie object</em>,</li>
<li>the interface the proxy has to expose,</li>
<li>the handler every method call has to be delegated to, it also <em>wraps</em> the <em>real object</em>.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovieReviews</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">MovieReviews</span><span class="o">().</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Reviewer</span> <span class="n">reviewer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Reviewer</span><span class="o">(</span><span class="n">buildMovieList</span><span class="o">());</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">reviewer</span><span class="o">.</span><span class="na">spoilMovieTitle</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;operation not permitted.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">reviewer</span><span class="o">.</span><span class="na">printMovieTiles</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">buildMovieList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">movieList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">forrestGumpMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MovieImpl</span><span class="o">(</span><span class="s">&quot;Forrest Gump&quot;</span><span class="o">,</span> <span class="s">&quot;Tom Hanks&quot;</span><span class="o">,</span> <span class="s">&quot;Gary Sinise&quot;</span><span class="o">,</span> <span class="s">&quot;Robin Wright&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">InvocationHandler</span> <span class="n">forrestGumpHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">InvocationHandlerImpl</span><span class="o">(</span><span class="n">forrestGumpMovie</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">forrestGumpProxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Movie</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">},</span> <span class="n">forrestGumpHandler</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">djangoMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MovieImpl</span><span class="o">(</span><span class="s">&quot;Django&quot;</span><span class="o">,</span> <span class="s">&quot;Quentin Tarantino&quot;</span><span class="o">,</span> <span class="s">&quot;Jamie Foxx&quot;</span><span class="o">,</span> <span class="s">&quot;Franco Nero&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">InvocationHandler</span> <span class="n">djangoHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">InvocationHandlerImpl</span><span class="o">(</span><span class="n">djangoMovie</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">djangoProxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Movie</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">},</span> <span class="n">djangoHandler</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">movieList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">forrestGumpProxy</span><span class="o">);</span>
</span><span class='line'>    <span class="n">movieList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">djangoProxy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">movieList</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Interface</h3>

<p>Very simple interface with some getters, setters and the method to comment the movie.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Movie</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getTitle</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getActors</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setActors</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">actors</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">comment</span><span class="o">(</span><span class="n">String</span> <span class="n">comment</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Invocation Handler</h3>

<p>This class will invoke the method, by using <em>reflection</em>, on the <em>real object</em> that is <em>wrapped</em>. The proxy object will create at runtime, so the handler is the only place where the protection logic can be put.</p>

<p>The protection disallow to use any <code>setter</code> method, only <code>getters</code> and <code>comment</code> methods can be invoked.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationTargetException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvocationHandlerImpl</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Movie</span> <span class="n">movie</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">InvocationHandlerImpl</span><span class="o">(</span><span class="n">Movie</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movie</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalAccessException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;comment&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">movie</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;get&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">movie</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Client</h3>

<p>The client will receive the list of the movies which he can write a comment on. From the reviewer point of view every object exposes the <code>Movie</code> interface, so he doesn&rsquo;t know to invoke methods against a proxy object.</p>

<p>Remember, both the proxy and the real movie object implement the <em>same interface</em> so the proxy can <em>take the place</em> of the <em>real object</em>.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Reviewer</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">movieList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Reviewer</span><span class="o">(</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movieList</span> <span class="o">=</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">spoilMovieTitle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Movie</span> <span class="n">movie</span> <span class="o">:</span> <span class="n">movieList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">movie</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;spoiled&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">printMovieTiles</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Movie</span> <span class="n">movie</span> <span class="o">:</span> <span class="n">movieList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">movie</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Proxy]]></title>
    <link href="http://blackat.github.io/blog/2013/03/22/remote-proxy-pattern/"/>
    <updated>2013-03-22T19:36:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/22/remote-proxy-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>The proxy acts as a <em>local representative</em> for an object that lives somewhere else on the network on a different JVM.</p></blockquote></p>

<!-- more -->


<p><strong>Scenario.</strong> The client uses a service invoking some methods. Actually the service is located on a remote machine but the location the service should be transparent respect to the client.</p>

<p><strong>Remote proxy.</strong> It behaves as a <em>local representative</em> for an remote object living on a <em>different JVM</em>.</p>

<p><strong>Method call.</strong> A method call against the proxy results in the <em>transfer of the call</em> over the wire to the remote JVM. Once there the method call is invoked against the real object. The result of the call is returned back to the <em>proxy</em>, then from the proxy to the <em>client</em>.</p>

<h2>RMI</h2>

<p>Java Remote Method Invocation (RMI) is an example of remote proxy. RMI build two <em>helper objects</em>, <em>stub</em> and <em>skeleton</em>, which <em>hide</em> the communication and technical details about the transfer of the method call and the result return. The client will just interact with the proxy, one of the two helper objects.</p>

<p><strong>RMI vs. Remote proxy</strong> Remote proxy does not involve any helper object as RMI does, but just the proxy concept.</p>

<h2>Example</h2>

<p>A very simple example consists of a client that uses a service to get something done. The client is unaware of the service location and type. The client does not know if the service is remote or local, if it will do database or disk access to provide data.</p>

<p>There are <em>five steps</em> to implement a <em>remote service</em> based on RMI.</p>

<h3>Remote Service Interface</h3>

<p>Define the <em>interface</em> the client will use to interact with the service.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.Remote</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.RemoteException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ContactService</span> <span class="kd">extends</span> <span class="n">Remote</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">listAll</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">RemoteException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="nf">getContactSize</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">RemoteException</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<strong>Remote interface.</strong> <code>java.rmi.Remote</code> is just a <em>marker</em> that is an interface without methods. The marker tells that the interface will be used to support <em>remote calls</em>.</p>

<p><strong>Client.</strong> It uses a service of type <code>ContactService</code>, the <em>remote service interface</em>, to invoke methods without knowing any implementation detail and thinking it is the real object.</p>

<p><strong>Proxy.</strong> It implements the <em>remote interface</em> as the real object does, so the proxy can be used as a <em>surrogate</em> of the real object or, better, the proxy <em>substitute</em> the real object for all the request.</p>

<p><strong>Stub.</strong> In RMI the proxy is called <em>stub</em>. It will manage all the networking and I/O operations. Something could go wrong (ex. network failure) so every remote method call is <em>risky</em> and has to declare to throw a <code>java.rmi.RemoteException</code> to handle possible communication failures.</p>

<p><strong>Arguments and return values.</strong> They must be <code>primitive</code> or <code>Serializable</code>. Serialization is used to package values and transfer them across the network. In the example above, all the types implement natively <code>Serializable</code> interface as many other types from Java API.</p>

<h3>Remote Service Implementation</h3>

<p>The implementation of the service is very simple, this is the <em>real object</em> where the calls will be invoked on. The service will reside on the server machine.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.RemoteException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.server.UnicastRemoteObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContactServiceImpl</span> <span class="kd">extends</span> <span class="n">UnicastRemoteObject</span> <span class="kd">implements</span> <span class="n">ContactService</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">protected</span> <span class="nf">ContactServiceImpl</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">RemoteException</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">listAll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">contacts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="n">contacts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Fermi&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">contacts</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Majorana&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">contacts</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getContactSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">18</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
<strong>Being remote.</strong> Service implementation must extends <code>java.rmi.server.UnicastRemoteObject</code> to make it <em>remote</em> and so working as a <em>remote service object</em>. This class has some functionality (ex. read and write values on the socket) that allow it to <em>be remote</em>.</p>

<p><strong>Superclass constructor.</strong> Superclass <code>UnicastRemoteObject</code> <em>constructor</em> throws a <code>RemoteException</code>. Superclass constructor is always called so no choice but declare that a constructor throws an exception.</p>

<p><strong>Remote service registration.</strong> The <em>remote service implementation</em> needs be registered in the registry to make it available to remote clients. The registration is done by the <code>Server</code> class.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.net.MalformedURLException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.Naming</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.RemoteException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ContactService</span> <span class="n">contactService</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ContactServiceImpl</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Naming</span><span class="o">.</span><span class="na">rebind</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;/</span><span class="n">contact_service</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">contactService</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<strong>RMI registry.</strong> Statement <code>Naming.rebind("/service", service)</code> puts the remote service <em>implementation</em> into the RMI registry with a <em>service name</em>. The client will use this name in order to look up for the <em>stub</em>.</p>

<p><strong>Stub.</strong> The server registers or puts the <em>stub</em> in the <em>registry</em>.</p>

<h3>Generate Stub and Skeleton</h3>

<p>They are the client and server <em>helpers</em> created automatically by <code>rmic</code>. These classes implements all the code necessary to manage the connection socket and transfer the method call to the real object residing on the remote JVM.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>MacBook:remote blackcat$ rmic ContactServiceImpl
</span></code></pre></td></tr></table></div></figure>
<strong>Stub and skeleton.</strong> Invoking <code>rmic</code> on <em>service implementation</em> generates <code>ContactServiceImpl_Stub.class</code> and <code>ContactServiceImpl_Skeleton.class</code>, the two helper objects. They will manage the transfer over the wire of the request about the method call which, finally, will be executed against the real object, <code>ContactServiceImpl</code>.</p>

<h3>Start the Registry</h3>

<p>The <code>rmiregistry</code> is a sort of white pages  where services can be registered and looked up. The client will look for the <em>proxy</em> or <em>client helper</em> or <em>stub</em> into the register. <em>Classes must be available to the rmi registry.</em>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>MacBook:remote blackcat$ rmiregistry &amp;amp;
</span></code></pre></td></tr></table></div></figure></p>

<h3>Start the Server</h3>

<p>Once the registry has been started, it is possible to run the server which will register the service implementation.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>MacBook:remote blackcat$ java Server
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Client</h3>

<p>The client looks up the service, gets the reference to the <em>stub</em> and invokes the method against it.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.net.MalformedURLException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.Naming</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.NotBoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.rmi.RemoteException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Client</span><span class="o">().</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ContactService</span> <span class="n">contactService</span> <span class="o">=</span> <span class="o">(</span><span class="n">ContactService</span><span class="o">)</span> <span class="n">Naming</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&quot;rmi://127.0.0.1/contact_service&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;number of contacts in the address book is: &quot;</span> <span class="o">+</span> <span class="n">contactService</span><span class="o">.</span><span class="na">getContactSize</span><span class="o">());</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">contact</span> <span class="o">:</span> <span class="n">contactService</span><span class="o">.</span><span class="na">listAll</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">contact</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NotBoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure>
<strong>Naming lookup.</strong> Static method <code>Naming.lookup("rmi://127.0.0.1/contact_service")</code> allows the client to get the reference to an instance which represents the <em>helper</em> or <em>stub</em>.</p>

<p><strong>Remote interface.</strong> The client uses the remote interface as service type without knowing the real <em>class name</em> of the remote service.</p>

<p><strong>Cast.</strong> The <code>lookup</code> method returns an instance of type <code>Object</code> which has to be casted to the remote service type.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual Proxy]]></title>
    <link href="http://blackat.github.io/blog/2013/03/22/virtual-proxy-pattern/"/>
    <updated>2013-03-22T19:35:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/22/virtual-proxy-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>It controls the access to a resource that is expensive to create, for instance data for object creation have to be retrieved from a network.</p></blockquote></p>

<!-- more -->


<p><strong>Scenario.</strong> The client has to interact with an object which is very expensive to create.</p>

<p><strong>Virtual proxy.</strong> The proxy hides the complexity of creating an managing the real subject. Moreover the proxy could <em>handle the request by itself</em> or <em>creates the expensive object</em> and directly delegate to it the request.</p>

<p><strong>Proxy in action.</strong> The proxy acts as a <em>surrogate</em> for the real object before and while it is created.</p>

<h2>Example</h2>

<p>Each contact of an address book has some details such as the name, surname, address and a picture. The picture should always be up to date, for this reason must be retrieved from the network or from a database. The creation of the picture is expensive involving a connection.</p>

<p>The proxy will control how the picture is retrieved without blocking the main application.</p>

<p><img src="/images/posts/design-patterns/virtual_proxy_example.png"></p>

<p>Implementing the same interface, <code>Picture</code>, <code>ProxyPicture</code> can be used in place of <code>ContactPicture</code> so the client will use an instance reference of type <code>Picture</code> without knowing that it is a proxy.</p>

<h3>Start</h3>

<p>When the system starts will create a proxy which will be passed to the client, the <code>Contact</code> class. Calling <code>toString()</code> method the first time will start the retrieval process.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressBook</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">AddressBook</span><span class="o">().</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">NetworkService</span> <span class="n">ns</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NetworkServiceImpl</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Contact</span> <span class="n">contact</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="k">new</span> <span class="nf">PictureProxy</span><span class="o">(</span><span class="n">ns</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">contact</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Client</h3>

<p>It gets a reference of type <code>Picture</code> thinking to be the real object, but it is the proxy.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Contact</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Picture</span> <span class="n">picture</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Contact</span><span class="o">(</span><span class="n">Picture</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">picture</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">picture</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;picture is going to be retrieved...&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">picture</span><span class="o">.</span><span class="na">getFormat</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">picture</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">picture</span><span class="o">.</span><span class="na">getImage</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Proxy</h3>

<p>It <strong><em>wraps</em></strong> the <em>real object</em>. At the first method call, the proxy will start a thread to retrieve the data and return a <code>null</code> value until data are not available then it <strong><em>builds</em></strong> the real object it wraps. Once the proxy will have the data it will <em>directly answer</em> to the client.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.net.MalformedURLException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PictureProxy</span> <span class="kd">implements</span> <span class="n">Picture</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">ContactPicture</span> <span class="n">contactPicture</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isRetrieving</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">NetworkService</span> <span class="n">networkService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">PictureProxy</span><span class="o">(</span><span class="n">NetworkService</span> <span class="n">ns</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">networkService</span> <span class="o">=</span> <span class="n">ns</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">contactPicture</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">retrieveImage</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">contactPicture</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getFormat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some code</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getImage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some code</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">retrieveImage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">isRetrieving</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">isRetrieving</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">contactPicture</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ContactPicture</span><span class="o">(</span><span class="s">&quot;john picture&quot;</span><span class="o">,</span>
</span><span class='line'>                        <span class="s">&quot;png&quot;</span><span class="o">,</span> <span class="n">networkService</span><span class="o">.</span><span class="na">getImage</span><span class="o">(</span><span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="s">&quot;http://imagerepo.com&quot;</span><span class="o">)));</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;picture retrieved&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxy Pattern]]></title>
    <link href="http://blackat.github.io/blog/2013/03/20/proxy-pattern/"/>
    <updated>2013-03-20T23:00:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/20/proxy-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>The Proxy Pattern provides a surrogate or placeholder for another object to control access to it.</p><footer><strong>Bates and Sierra</strong> <cite><a href="http://shop.oreilly.com/product/9780596007126.do">http://shop.oreilly.com/product/9780596007126.do</a> Head First Design Patterns</cite></footer></blockquote></p>

<!-- more -->


<h2>Class Diagram</h2>

<p><img src="/images/posts/design-patterns/proxy.jpg"></p>

<p><code>Subject</code> interface is implemented by both <code>RealSubject</code> and <code>Proxy</code>. So they are <em>interchangeable</em> and it allows the <em>client</em> to treat the <code>Proxy</code> as <code>RealSubject</code>.</p>

<p><code>RealSubject</code> does the <em>real work</em> and the <code>Proxy</code> <u><em>controls the access</em></u> to it.</p>

<p><code>Proxy</code> handles the <em>creation</em> of the <code>RealSubject</code> keeping a <em>reference</em> to the <code>Subject</code> in order to be able to forward the request coming from the client to the real implementation.</p>

<p>Proxy can controls the access to the <em>real object</em> in different ways</p>

<ul>
<li><a href="/blog/2013/03/22/remote-proxy-pattern"><strong>Remote proxy.</strong></a>

<ul>
<li>It <u>controls the access</u> to a <em>remote object</em>.</li>
<li>The proxy acts as a <em>local representative</em> for an object that <em>lives on different JVM</em>.</li>
<li><em>The object actually lives somewhere else on the network.</em></li>
</ul>
</li>
<li><a href="/blog/2013/03/22/virtual-proxy-pattern"><strong>Virtual proxy.</strong></a>

<ul>
<li>It <u>controls the access</u> to a <em>resource</em> that is expensive to create.</li>
<li>The proxy acts as a <em>representative</em> for an object that may be expensive to create.</li>
<li>It <em>defers the creation</em> of the object until it is needed.</li>
<li>Virtual proxy acts as a <em>surrogate</em> for the object <em>before and while</em> it is being created.</li>
<li>Object is expensive to create because it has to be retrieved from a database over the network.</li>
</ul>
</li>
<li><a href="/blog/2013/03/22/protection-proxy-pattern"><strong>Protection proxy.</strong></a>

<ul>
<li>It <u>controls the access</u> to a <em>resource</em> based on access rights.</li>
</ul>
</li>
<li><strong>Caching proxy.</strong> Similar to a virtual proxy but it <em>caches</em> the expensive objects it creates to reduce the latency of the forwarded request.</li>
</ul>


<h2>Key Points</h2>

<ul>
<li><strong>Proxy pattern</strong>

<ul>
<li>provides a surrogate or place holder for another object,</li>
<li>creates a representative object that <u><em>controls access</em></u> to another object which can be <em>remote</em>, <em>expensive to create</em> or <em>need secure access</em> to have its methods used.</li>
</ul>
</li>
<li><strong>Wrapper</strong>

<ul>
<li>In some way the proxy <em>wraps</em> (<code>HAS-A</code>) the real object.</li>
<li>Proxy <em>&ldquo;intercepts&rdquo;</em> the requests from the client and forwards them to the real object acting a some form of control on them.</li>
<li>If the real object is remote, there is a sort of <em>&ldquo;remote proxy&rdquo;</em> receiving the request or call over the network invoking the call of the method against the real object it owns.</li>
</ul>
</li>
<li><strong>Factory method</strong>    Using a <em>factory method</em> it is possible to <em>wrap</em> the <em>real object</em> into the proxy and return it to the client as it was the real one.</li>
</ul>


<h2>Comparisons</h2>

<p>All proxies have in common the ability to intercept a method call that a client has done. The client always invoke method on a <em>proxy</em> thinking that it is the <em>real object</em>. <em>Proxies always acts as surrogates.</em></p>

<h3>Proxy vs. Decorator and Adapter</h3>

<ul>
<li><strong>Proxy</strong>

<ul>
<li>It always <em>control the access</em> to a <em>class</em>.</li>
<li>Proxy decouples the client from the real object. Controlling the access, the proxy allow the client the use of the real object only when it is available, so the client doesn&rsquo;t have to wait for it.</li>
<li>The protection proxy may provides a partial interface to a real object, in this it is similar to an adapter.</li>
<li>It <strong>wraps the subject</strong>. The client doesn&rsquo;t know what object has been wrapped. Virtual proxy <em>wraps</em> an object that even doesn&rsquo;t exist at the beginning.</li>
</ul>
</li>
<li><strong>Decorator</strong>

<ul>
<li>It always <em>adds behavior</em> to a <em>class</em>.</li>
<li>It wraps an <strong>object</strong>.</li>
<li>It <em>never</em> instantiates anything.</li>
</ul>
</li>
<li><strong>Adapter</strong>

<ul>
<li>It forwards the request from the client to another object, but it <em>changes the interface</em> of the objects it adapts.</li>
<li>It is <em>different</em> from the <em>proxy</em> which always implement the <em>same interface</em> of the real object.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
