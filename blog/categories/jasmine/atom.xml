<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jasmine | Contrast Of Beauty]]></title>
  <link href="http://blackat.github.io/blog/categories/jasmine/atom.xml" rel="self"/>
  <link href="http://blackat.github.io/"/>
  <updated>2014-12-13T20:43:02+01:00</updated>
  <id>http://blackat.github.io/</id>
  <author>
    <name><![CDATA[black@t]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fullstack Javascript Web Application Part 2]]></title>
    <link href="http://blackat.github.io/blog/2014/10/03/fullstack-javascript-web-application-part-2/"/>
    <updated>2014-10-03T23:52:35+02:00</updated>
    <id>http://blackat.github.io/blog/2014/10/03/fullstack-javascript-web-application-part-2</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The single page web application will be enriched with a database support, a build system with dependencies management and a testing framework.</p>

<p><a href="http://gruntjs.com/" title="Grunt homepage">Grunt</a> task runner and <a href="bower.io" title="Bower homepage">Bower</a> package management system will be configured. Then <a href="http://www.mongodb.org/" title="MongoDB homepage">Mongodb</a> with a persistent model will be added, finally <a href="http://jasmine.github.io/" title="Jasmine homepage">Jasmine</a> and <a href="http://karma-runner.github.io/0.12/index.html" title="Karma homepage">Karma</a> will support tests and their execution.</p>

<!-- more -->


<h2>1. Continuos build integration</h2>

<p><a href="http://gruntjs.com/" title="Grunt homepage">Grunt</a> is a <em>task runner</em>, means it runs pre-defined tasks and custom tasks defined by the user in order to achieve a certain goal such as the deployment in production, running unit and end-to-end (e2e) tests and so on.</p>

<p><a href="bower.io" title="Bower homepage">Bower</a> is a package management system quite widespread in the javascript community added to manage packages for client-side programming. It depends on <em>Node.js</em> and <em>npm</em>.</p>

<h3>1.1 Grunt Task Runner</h3>

<pre><code class="json package.json https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/package.json">{
    "name": "popcorn-time-backend",
    "description": "a web application based on node, express, mongodb and grunt task runner with bower dependencies manager",
    "version": "0.0.1",
    "private": true,
    "dependencies": {
        "express": "4.0.x",
        "ejs": "~0.8.4"
    },
    "devDependencies": {
        "grunt": "~0.4.5",
        "grunt-contrib-jshint": "~0.10.0",
        "grunt-contrib-uglify": "~0.5.0",
        "load-grunt-tasks": "~0.2.0",
        "grunt-express-server": "~0.4.19",
        "grunt-open": "~0.2.0",
        "time-grunt": "~0.2.1",
        "load-grunt-tasks": "~0.2.0"
    }
}
</code></pre>

<p>Modify the list of modules in order to include the dependencies to Grunt and Grunt plugins in <code>devDependencies</code>.</p>

<p>Previous dependencies have been removed and will be managed by Bower later on. <code>package.json</code> manages just Grunt and Bower dependencies necessary to manage the all project lifecycle.</p>

<h3>1.2 Grunt file configuration</h3>

<pre><code class="javascript Gruntfile.js">'use strict';

// 1. Wrapper function
module.exports = function (grunt) {

    // replace step 3
    require('load-grunt-tasks')(grunt);

    // 2. Project and tasks configuration
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        express: {
            options: {
                port: process.env.PORT || 9000
            },
            dev: {
                script: 'server.js',
                debug: true
            }
        },
        open: {
            server: {
                url: 'http://localhost:&lt;%= express.options.port %&gt;'
            }
        }
    });


    // 3. Load grunt plugins and tasks

    // 4. Custom tasks
    grunt.registerTask('serve', 'default is dev environment', function(target){

        grunt.task.run([
            'express:dev',
            'open'
        ]);
    });
}
</code></pre>

<p>Add <code>Gruntfile.js</code> to the project used to define tasks and load plugins. Grunt configuration file is made of four parts</p>

<ol>
<li>Wrapper function: when Grunt is run from the CLI, it looks for the configuration file in order to load plugins and run the required task. Grunt</li>
<li>Project and tasks configuration: here plugin&rsquo;s tasks are defined in order to be reused later on. For instance <code>express</code> Grunt plugin has been declared in the <code>package.json</code>, along with the plugin come some tasks which could be configured and used. <code>express</code> plugin task is declared and configured as the <code>open</code> plugin&rsquo;s task.</li>
<li><p>Load grunt plugins and tasks: for instance <code>express</code> plugin must be declared under <code>devDependencies</code> in <code>package.json</code>, configured in <code>Gruntfile.js</code> but even loaded. This section is done for loading such plugins which define tasks such as  <code>grunt.loadNpmTasks('grunt-express-server');</code>.</p>

<p> When the project grows there could be many lines each one to load a plugin, this can become quite annoying and even result in a good amount of boiler-plate code. As alternative solution, use <a href="(https://github.com/sindresorhus/load-grunt-tasks)" title="Load grunt task plugin">load-grunt-task</a> plugin in order to automatically load plugins from <code>dependencies</code> and <code>devDependencies</code> in <code>package.json</code>, so just <em>load plugins in one line</em>.</p></li>
<li><p>Custom tasks: here define your task as aggregation of tasks defined and configured in section number 2.</p></li>
</ol>


<h3>1.3 First run</h3>

<p>Run <code>npm install</code> to install modules locally or <code>npm install -g</code> to install modules globally then run <code>grunt serve</code> task.</p>

<h3>1.4 Bower Package Management System</h3>

<pre><code class="javascript bower.json https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/bower.json">{
    "name": "popcorn-time-backend-bower",
    "version": "0.0.1",
    "homepage": "https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt",
    "authors": [
        "blackat &lt;blackat@somewhere.world&gt;"
    ],
    "description": "A web application based on node, express, mongodb and grunt task runner with bower dependencies manager",
    "moduleType": [
        "node"
    ],
    "license": "MIT",
    "ignore": [
        "**/.*",
        "node_modules",
        "bower_components",
        "app/bower_components",
        "test",
        "tests"
    ]
}
</code></pre>

<p>Type <code>npm install -g bower</code> to install <strong>Bower</strong> globally, then <code>bower init</code> in the root folder of the current project to have <code>bower.json</code> <em>manifest</em> file created and initialized with some basic information.</p>

<h4>1.4.1 Bower in a Nutshell</h4>

<p><em>Bower</em> manages front-end components (css, html, js), <em>npm</em> manages Javascript modules called packages. Some components can be installed by <em>npm</em> as well but step by step a cleaner difference between backend and frontend elements is arising. <em>Ember</em> updates for instance are currently published only under <em>Bower</em>. More on the difference  <a href="http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer">here</a>.</p>

<p>Thus <code>package.json</code> is used to install <em>Node</em> modules such as <em>Grunt</em>, <em>Express</em> and so on, instead <code>bower.json</code> for all the client-side libraries such as <em>Angular</em>, <em>Bootstrap</em> and all the components could be required by <code>index.html</code> page.</p>

<h4>1.4.2 Configure Grunt Wiredep Task</h4>

<pre><code class="json package.json https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/package.json">},
    "devDependencies": {
        ...
        "grunt-wiredep": "~1.9.x",
        ...
    }
</code></pre>

<p>Add <code>grunt-wiredep</code> to <code>package.json</code>. It is the <em>grunt task</em> will inject UI dependencies. Then add and configure the grunt task in <code>Gruntfile.js</code> as follows:</p>

<pre><code class="json Gruntfile.js https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/Gruntfile.js">    ...
    grunt.initConfig({
        ...
        // Download and inject Bower components into the app
        wiredep: {
            target: {
                src: 'app/views/**/*.html',
                options: {
                    cwd: '',
                    dependencies: true,
                    devDependencies: false,
                    exclude: ['app/bower_components/bootstrap/dist/js/bootstrap.js']
                }
            }
        }
    });
        ...
    grunt.registerTask('serve', 'default is dev environment', function (target) {
        grunt.task.run([
            'wiredep',
            'express:dev',
            'open',
            'express-keepalive'
        ]);
    });
</code></pre>

<h4>1.4.3 Inject Bower Components</h4>

<pre><code class="json bower.json https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/bower.json">    ...
    "dependencies": {
        "angular": "&gt;=1.2.*",
        "angular-resource": "&gt;=1.2.*",
        "angular-route": "&gt;=1.2.*",
        "bootstrap": "&gt;=3.2.*",
        "less.js": "&gt;=1.7.*",
        "fontawesome": "&gt;=4.2.x",
        "angular-xeditable": "&gt;=0.1.x",
        "angular-mocks": "&gt;=1.2.*"

    },
    "devDependencies": {

    }
</code></pre>

<p>Insert the list of dependencies Bower has to inject into <code>index.html</code> and remove them from <code>package.json</code>. Now frontend dependencies are managed and injected by <em>Bower</em> and not anymore by <em>npm</em></p>

<p>&#8220;`html app/views/index.html <a href="https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/app/views/index.html">https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/app/views/index.html</a>
&lt;!DOCTYPE html>
<html lang="en" ng-app="movieApp">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Movie page</title>
    <!-- bower:css -->
    <!-- endbower -->
    <link href="http://blackat.github.io/styles/style.less" rel="stylesheet/less">
</head>
<body ng-controller="MainController">
&hellip;
</body></p>

<!-- bower:js -->


<!-- endbower -->


<script src="scripts/services/services.js"></script>


<script src="scripts/controllers/controllers.js"></script>


<p></html>
<code>``
Specify in</code>index.html<code>where _Bower_ should insert css and javascript dependencies that have been specified in</code>bower.json`.</p>

<p>Once done run</p>

<ul>
<li><code>bower install</code> to download <em>Bower</em> components;</li>
<li><code>grunt serve</code> to run all the defined tasks and have the server up and running.</li>
</ul>


<p> Just to test the injection task run <code>grunt wiredep</code> and check that dependencies have been added to the <code>index.html</code> page as follows:
<figure class='code'><figcaption><span>app/views/index.html <a href="https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/app/views/index.html">https://github.com/blackat/popcorn-time-express-angular-mongodb-grunt/blob/master/app/views/index.html</a></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;movieApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>     <span class="nt">&lt;title&gt;</span>Movie page<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>     <span class="c">&lt;!-- bower:css --&gt;</span>
</span><span class='line'>     <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;../bower_components/bootstrap/dist/css/bootstrap.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;../bower_components/fontawesome/css/font-awesome.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;../bower_components/angular-xeditable/dist/css/xeditable.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'>     <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://blackat.github.io/styles/style.less&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet/less&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-controller=</span><span class="s">&quot;MainController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="ni">&amp;hellip;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- bower:js --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../bower_components/jquery/dist/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../bower_components/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../bower_components/angular-resource/angular-resource.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../bower_components/angular-route/angular-route.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../bower_components/less.js/dist/less-1.7.5.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../bower_components/angular-xeditable/dist/js/xeditable.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../bower_components/angular-mocks/angular-mocks.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/services/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>2. MongoDB</h2>

<h3>2.1 Model</h3>

<p>As first thing I want to define the object model should be persisted, retrieved and finally show off in the client user interface. So in &lsquo;../lib/models&rsquo; define</p>

<pre><code class="javascript /lib/models/product.js">'use strict';

var mongoose = require('mongoose'),
    Schema   = mongoose.Schema;

var ProductSchema = new Schema({
    name: String,
    description: String
    });

mongoose.model('Product', ProductSchema);
</code></pre>

<p>I have decided to use <a href="http://mongoosejs.com/" title="Mongoose home page">mongoose</a> in order to reduce boilerplate code for validation, read/write operation and so on.</p>

<blockquote><p>With Mongoose, everything is derived from a Schema. Each <a href="http://mongoosejs.com/docs/guide.html" title="Mongoose Schemas">schema</a> maps to a MongoDB collection and defines the shape of the documents within that collection.</p></blockquote>

<p>I have defined a very simple schema for a product with only two fields <code>name</code> and <code>description</code>.</p>

<blockquote><p>Models are fancy constructors compiled from our Schema definitions.</p></blockquote>

<h4>Routes</h4>

<p>Once the user has required an action on a resource it has to be served according to its name and the <code>HTTP verb</code>. Thus create an instance of <a href="http://expressjs.com/4x/api.html#app.route" title="express route api">route</a> with a specific name and then manage all the <code>HTTP verbs</code> avoiding duplicates in names.</p>

<pre><code class="javascript /lib/routes.js">'use strict';

var products = require('./controllers/products');

module.exports = function(app) {

    app.route('api/products').get(products.products);
};
</code></pre>

<h4>Controller</h4>

<p>Once done the object should be retrieved from the data source, create a new module file in &lsquo;../lib/controllers&rsquo;:</p>

<pre><code class="javascript /lib/controllers/products.js">'use strict';

var mongoose = require('mongoose'),
    Product = mongoose.model('Product');

exports.products = function (req, res) {
    return Product.find(function (err, prods) {
        if (!err) {
            return res.json(prods);
        } else {
            return res.send(err);
        }
    });
};
</code></pre>

<p>In order to retrieve all the product documents stored in the data source, use static method <code>find</code>. Documents are instances of the model.</p>

<p>The module <code>products.js</code> exports the function <code>products()</code> adding it to the <code>exports</code> object. The function will be added to the root of the module.</p>

<h4>RESTful Backend</h4>

<p>In order to better interact with the frontend, a RESTful backend has to be provided by means of <em>REST endpoints</em> as follows:</p>

<table>
<thead>
<tr>
<th>Url            </th>
<th> HTTP Verb </th>
<th> POST Body   </th>
<th> Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>api/movies     </td>
<td> GET       </td>
<td> empty       </td>
<td> return all the movies    </td>
</tr>
<tr>
<td>api/movies     </td>
<td> POST      </td>
<td> JSON String </td>
<td> create a new movie       </td>
</tr>
<tr>
<td>api/movies/:id </td>
<td> GET       </td>
<td> empty       </td>
<td> return a single movie    </td>
</tr>
<tr>
<td>api/movies/:id </td>
<td> PUT       </td>
<td> JSON String </td>
<td> update an existing movie </td>
</tr>
<tr>
<td>api/movies/:id </td>
<td> DELETE    </td>
<td> empty       </td>
<td> delete an existing entry </td>
</tr>
</tbody>
</table>


<h2>3. Morgan the Logger</h2>

<h2>4. Angular</h2>

<p>A nice way to implement <em>CRUD operations</em> in <a href="https://angularjs.org/">Angular</a> is using <code>$resource</code> factory which helps to interact with a standard <em>REST endpoints</em>. In <code>bower.json</code> the module <code>angular-resource</code> is already present, then it will be injected into &lsquo;index.html&rsquo; by <a href="bower.io" title="Bower homepage">Bower</a>.</p>

<h3>4.1 Consuming a RESTful service</h3>

<pre><code class="javascript /app/scripts/services/movieServices.js">'use strict';

var  movieServices = angular.module('movieApp.movieServices', ['ngResource']);

movieServices.factory('Movie', function($resource){
    return $resource('movies/movies/:id', {id:'@_id'});
});
</code></pre>

<p>Module <code>ngResource</code> needs to be installed and declared in order to use its <strong>service</strong> <code>$resource</code>. The returned resources has <strong>action methods</strong> providing higher-level behaviors than the low level <code>$http</code>.</p>

<p>According to Angular  <a href="https://docs.angularjs.org/api/ngResource/service/$resource">api</a> a parametrized URL has to be specified, it is the <em>full endpoint</em> address which covers all the URLs for basic CRUD operations.</p>

<pre><code>$resource(url, [paramDefaults], [actions], options);
</code></pre>

<p><code>:id</code> is the parameter and <code>{id:@_id}</code> is the name of the parameter in the <code>data</code> object provided when the method will be called, so it means extract the value of parameter <code>data._id</code> and assign it to <code>id</code> parameter.</p>

<p>The returned object has a <em>default set</em> of <strong>resource actions</strong> which can be extended with custom <code>actions</code>.</p>

<pre><code>{
    'get':    {method:'GET'},
    'save':   {method:'POST'},
    'query':  {method:'GET', isArray:true},
    'remove': {method:'DELETE'},
    'delete': {method:'DELETE'}
};
</code></pre>

<h2>5. Testing</h2>

<ul>
<li>unit test the RESTful api, user <a href="https://github.com/visionmedia/supertest">SuperTest</a></li>
<li>Jasmine</li>
<li>Karma</li>
<li>Mongodb? integration test?</li>
</ul>


<!-- Links -->

]]></content>
  </entry>
  
</feed>
