<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Contrast Of Beauty]]></title>
  <link href="http://blackat.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blackat.github.io/"/>
  <updated>2015-03-25T07:10:00+01:00</updated>
  <id>http://blackat.github.io/</id>
  <author>
    <name><![CDATA[black@t]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kii Web Application]]></title>
    <link href="http://blackat.github.io/blog/2014/12/11/kii-web-application/"/>
    <updated>2014-12-11T19:32:27+01:00</updated>
    <id>http://blackat.github.io/blog/2014/12/11/kii-web-application</id>
    <content type="html"><![CDATA[<p>The current <strong>tut</strong> explore how to create a simple mobile application with HTML5, CSS3 and JavaScript based on the new Kii Javascript SDK. Basically Kii Corporation offers a rich cloud mobile backend to help the development of a mobile application providing some services out of the box such as user registration and login. Then the application will be wrapped by Apache Cordova to obtain a deployable app for iOS and Android in a hybrid fashion.</p>

<p><img class="center" src="/images/posts/genymotion-get-your-box.png"></p>

<!-- more -->


<h2>Preview of the application in Plunker</h2>

<p>A preview of the web application that is going to be implemented can be seen and tested in <a href="http://plnkr.co/edit/mSrWyzmmgOeSzCDKRWk8?p=preview" target="_blank">Plunker</a> using <code>jon/dohh</code> as username/password or just registering a new user. Password must be at least 4 charaters and special ones are not allowed</p>

<p>In order to make it work I had to brutally copy/paste the content of the Kii Javascript SDK in a file because Plunker does not allow file upload.</p>

<h2>Build steps</h2>

<h3>1. Create a Kii cloud application</h3>

<p>First of all create a Kii account and then a new Kii application, put the name and select the HTML5 logo. Now download the <a href="https://developer.kii.com/v2/apps/5510/downloads-templates" target="_blank">Kii Javascript SDK</a>.</p>

<h3>2. Clone Github repository</h3>

<p>Clone the repository containing the simple application</p>

<pre><code>$ git clone https://github.com/blackat/kii-sdk-js-101.git
</code></pre>

<p>The application is the same application has been implemented in <a href="http://plnkr.co/edit/mSrWyzmmgOeSzCDKRWk8?p=preview" target="_blank">Plunker</a> with the following structure:</p>

<pre><code>├── css
│   ├── bootstrap.min.css
│   └── style.css                   # custom style
├── fonts
│   └── CherryCreamSoda.ttf         # a fancy font
├── index.html                      # single page of the web application
├── js
│   ├── angular.min.js
│   ├── angular.min.js.map
│   ├── kiisdk.js                   # Kii JavaScript SDK
│   └── script.js                   # custom script for Angular controllers
├── package.json
└── server.js                       # server side configuration
</code></pre>

<p>In the <code>index.html</code> a minimal form has been implemented to allow login and registration of the user. Just to make the UI a bit more fancy and easy to develop, Boostrap and AngularJS frameworks have been added.</p>

<h4>2.1 Kii JavaScript SDK</h4>

<p>The SDK has been used to perform <em>login</em> and <em>registration</em> action.</p>

<pre><code class="javascript js/script.js https://github.com/blackat/kii-sdk-js-101/blob/master/js/script.js">$scope.login = function () {

    KiiUser.authenticate($scope.user.username, $scope.user.password, {
        // Called on successful registration
        success: function (theUser) {

        },

        // Called on a failed authentication
        failure: function (theUser, errorString) {

        }
    })
};
</code></pre>

<p>Some details has been remove just to focus on the <code>authenticate</code> function. Once the credential has been sent to the cloud one of the two functions will be called according to the outcome of the authentication.</p>

<p>The registration function is a bit different, a new <code>KiiUser</code> object has to be created with the data coming from the <code>form</code> and then the function <code>register</code> has to be called. As for the <code>login</code> function two callbacks are available to manage possible process outcomes.</p>

<pre><code class="javascript js/script.js https://github.com/blackat/kii-sdk-js-101/blob/master/js/script.js">$scope.register = function () {

    // Create the KiiUser object
    var user = KiiUser.userWithUsername($scope.user.username, $scope.user.password);

    // Register the user, defining callbacks for when the process completes
    user.register({
        // Called on successful registration
        success: function (theUser) {

        },
        // Called on a failed registration
        failure: function (theUser, errorString) {

        }
    });
};
</code></pre>

<h3>3. Local test with node.js</h3>

<p>In order to locally test in a browser the application <code>node.js</code> can be used. Download and install <a href="http://nodejs.org/download/" target="_blank">node.js</a>. On mac use <a href="http://brew.sh/"target="_blank">homebrew</a></p>

<pre><code>$ brew install node
</code></pre>

<p>once done use <code>npm</code> to install modules declared in <code>package.json</code></p>

<pre><code>$ npm install -g
</code></pre>

<p>where <code>-g</code> option means glabally, remove it to have all the modules installed locally in a folder named <code>node_modules</code>. Then, in the folder where the repository has been cloned, run the command</p>

<pre><code>$ node server.js
</code></pre>

<p>and type in a browser tab <code>http://127.0.0.1:5000/</code> to load the web page.</p>

<h3>4. PhoneGap/Apache Cordova Installation</h3>

<p>PhoneGap wraps a native web application written in HTML, CSS and JavaScript in a native application of a given platform such as iOS, Android, Windows8 and more.</p>

<p><a href="http://www.smashingmagazine.com/2014/02/11/four-ways-to-build-a-mobile-app-part3-phonegap/">Here</a> it is possible to find a more detailed tutorial about hot to build a mobile application using PhoneGap.</p>

<h4>PhoneGap vs Cordova</h4>

<blockquote><p>PhoneGap is a distribution of Apache Cordova. You can think of Apache Cordova as the engine that powers PhoneGap, similar to how WebKit is the engine that powers Chrome or Safari.</p></blockquote>

<p>More <a href="http://phonegap.com/2012/03/19/phonegap-cordova-and-what%E2%80%99s-in-a-name/">here</a></p>

<h4>Prepare the environment</h4>

<p><a href="http://nodejs.org/download/">Install Node.js</a> if not yet done.</p>

<p>Install Apache Cordova</p>

<pre><code>npm install -g cordova
</code></pre>

<p>Optional, to debug install <a href="http://www.raymondcamden.com/index.cfm/2013/11/5/Ripple-is-Reborn">Apache Ripple emulator</a></p>

<pre><code>$ npm install -g ripple-emulator
</code></pre>

<p>Install Android SDK</p>

<pre><code>$ brew install android
</code></pre>

<p>Install &lsquo;&#8217;actual SDK stuff&rsquo;&#8217;</p>

<pre><code>$ android
</code></pre>

<p><a href="https://www.genymotion.com/#!/download">Install Genymotion</a> to test the mobile application for Android devices.</p>

<h4>Genymotion</h4>

<p>Genymotion offers a better and more straight forward way to test an Android app than the native emulator. Once done register one or more virtual divices according to your preferences.</p>

<p><img class="center" src="/images/posts/genymotion-devices.png"></p>

<p>Pay attention about the specified <code>API version</code> of the virtual devices because it must match the one installed previously when <code>android</code> command has been run to install &lsquo;&#8217;actual SDK stuff&rsquo;&lsquo;, both are at version 21.</p>

<p><img class="center" src="/images/posts/android-sdk.png"></p>

<h3>5. Create the Apache Cordova application</h3>

<h4>Step A - Create a Cordova project</h4>

<p>Run the command</p>

<pre><code>$ cordova create kii101phonegap com.kii.phonegap Kii101PhoneGap
</code></pre>

<p>This command will create a project named <em>Kii101PhoneGap</em> in the folder <code>kii101phonegap</code>.</p>

<h4>Step B - Add project files</h4>

<p>Copy the cloned repository content under the <code>www</code> into the project just created.</p>

<pre><code>├── css
│   ├── bootstrap.min.css
│   └── style.css
├── fonts
│       └── CherryCreamSoda.ttf
├── index.html
└── js
    ├── angular.min.js
    ├── angular.min.js.map
    ├── kiisdk.js
    └── script.js
</code></pre>

<h4>Step C - Add platforms</h4>

<p>Switch to folder <code>kii101phonegap</code> and add the platforms against which the test will be done, for instance iOS and Android</p>

<pre><code>$ cordova platform add ios
$ cordova platform add android
</code></pre>

<h4>Step D - Build and emulate</h4>

<p>Build the application and test it in <strong>iOS</strong> platform running</p>

<pre><code>$ cordova build ios
$ cordova emulate ios
</code></pre>

<p>after the project have been built, an emulation window opens showing the developed application.</p>

<p>For <strong>Android</strong> it is a bit different, before start the Genymotion virtual device created in one of the previous steps, then in the command line type</p>

<pre><code>$ adb devices
</code></pre>

<p>and see how the Genymotion virtual device is seen as a real one</p>

<pre><code>List of devices attached
192.168.56.101:5555 device
</code></pre>

<p>so run the command</p>

<pre><code>$ cordova run android
</code></pre>

<p>and the application will be deployed into the Genymotion device.</p>

<h2>From the Kii Team</h2>

<p>If you&rsquo;re interested in more samples that use <strong>Kii Cloud</strong> please take a look at the <a href="https://github.com/KiiCorp">GitHub page</a> from the Kii team. Also, if you&rsquo;re interested in other platforms, please check out their samples section available <a href="http://docs.kii.com/en/samples/">here</a>.</p>

<h2>Trobleshooting</h2>

<h4>Android target</h4>

<p>Sometimes could happen that a prject has been created when a previuos <code>android-sdk</code> was installed, then having created a new device based on a more recent <code>API</code> the following error arises</p>

<pre><code>ERROR: Error: Please install Android target 19 (the Android newest SDK).
Make sure you have the latest Android tools installed as well.
Run "android" from your command-line to install/update any missing SDKs or tools.
</code></pre>

<p>In the folder <code>kii101phonegap/platforms/android</code> of the Cordova application check the following files and keep android-sdk version consistent.</p>

<pre><code>├── AndroidManifest.xml     # &lt;uses-sdk&gt; tag
├── local.properties        # location of the SDK. This is only used by Ant
├── project.properties      # project target
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fullstack Javascript Web Application Part 1]]></title>
    <link href="http://blackat.github.io/blog/2014/09/09/fullstack-javascript-web-application/"/>
    <updated>2014-09-09T22:13:06+02:00</updated>
    <id>http://blackat.github.io/blog/2014/09/09/fullstack-javascript-web-application</id>
    <content type="html"><![CDATA[<p>The web application will allow the user to manage a list of movies, show them, update them, store new ones and delete existing ones.</p>

<p><img class="center" src="/images/posts/popcorn-time-screenshot.png"></p>

<p>This web application will help to show how to structure a full stack Javascript web application and which components are required to make it work.</p>

<p>The application will start simple and step by step components will be added such as the database, the testing framework, the task runner and the dependency management.</p>

<!-- more -->


<h2>1. Single Page Web Application Scaffolding</h2>

<p>As first step the web application will be composed by</p>

<ul>
<li>Node.js the web server</li>
<li>Express the web framework</li>
</ul>


<h3>1.1 Folder structure</h3>

<p>The starting point is the folder structure to organize resources and configuration files.</p>

<pre><code>├── app
│   └── views
│       └── index.html              # =&gt; single page of the web application
├── lib
│   ├── config
│   │   └── express.js      # =&gt; configuration file for expressjs framework
│   ├── controllers
│   │   └── index.js        # =&gt; controller to serve the starting page
│   └── routes.js           # =&gt; router to map REST request with controller
├── package.json            # =&gt; set of required nodeJs modules
└── server.js               # =&gt; boostrap of the server side
</code></pre>

<h3>1.2 Express Dependency</h3>

<pre><code class="json">{
    "name": "popcorn-time-backend",
    "version": "0.0.1",
    "dependencies": {
        "express": "4.0.x"
    },
    "devDependencies": {

    }
}
</code></pre>

<p><strong>Express</strong> is a web application framework for <strong>Node.js</strong> used to develop web application totally written in Javascript. The framework provides <em>high level methods</em> way to manage requests mapping a route with the designated controller able to provide data.</p>

<p>In the <code>package.json</code> file add the dependency on the web framework. This file is used by <code>npm</code> to store metadata of projects published as npm module and to easily installed them locally running the command <code>npm install</code>.</p>

<h3>1.3 Server Configuration</h3>

<pre><code class="javascript">var express = require('express'),
    app = express();

app.get('/', function(req, res) {
    res.send("Hello World")
});

var server = app.listen(9001, function() {
    console.log('Express server is listening on port %d', server.address().port);
});
</code></pre>

<p><strong>Express</strong> module is loaded by <code>require('express')</code> then a new application instance is created invoking <code>express()</code>.</p>

<p>Defined a route via</p>

<ul>
<li><code>app.VERB</code> method, where <code>VERB</code> stands for <code>HTTP VERB</code>. In the example <code>GET</code> is the verb;</li>
<li><code>/</code> the <code>URL</code> the route is mapped to;</li>
<li>a function implementation to manage request and response.</li>
</ul>


<p>Finally <em>bind</em> and <em>listen</em> for connection invoking method <code>app.listen()</code>.</p>

<h3>1.4 First Run of the Application</h3>

<p>Run <code>npm install</code> in the command line to locally install the declared dependencies. Once done type <code>node server.js</code>, open a browser and hit <code>http://localhost:9001</code>.</p>

<h3>1.5 Separate Express routes</h3>

<pre><code class="javascript lib/routes.js">module.exports = function(app) {

    app.route('/').get(function(req, res, next){
        res.send('Hello World');
    });
};
</code></pre>

<p>Express 4.0 has introduced the <code>app.route()</code> <a href="http://expressjs.com/4x/api.html#app.route" title="Express route method">method</a> which is the recommended approach to handle HTTP verbs. Routes are in a separated files which is loaded by <code>server.js</code> as follows.</p>

<pre><code class="javascript server.js">var express = require('express'),
    app = express();

require('./lib/routes')(app);

var server = app.listen(9001, function(){
    console.log('Express server is listening on port %d', server.address().port);
});
</code></pre>

<h3>1.6 Return index.html</h3>

<pre><code class="javascript lib/routes.js">var index = require('./controllers');

module.exports = function(app) {

    app.route('/').get(index.index);
};
</code></pre>

<p>The <code>html</code> page will give the life to the single page web application. The function calls the <code>index</code> controller method called <code>index</code> which returns the page as follows:</p>

<pre><code class="javascript lib/controllers/index.js">exports.index = function(req, res) {
    res.render('index');
}
</code></pre>

<p>Then the <code>html</code> page to be returned</p>

<pre><code class="html app/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head lang="en"&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Popcorn Time&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Popcorn Time&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>1.7 Express Configuration and the Render Engine</h3>

<p>The <code>index.html</code> page cannot still be found by express. Configure the web framework to render and serve views from a given folder.</p>

<pre><code class="javascript lib/config/express.js">var path = require('path');

module.exports = function(app) {

    var rootpath = path.normalize(__dirname + '/../..');

    app.set('views', rootpath + '/app/views');

    app.engine('html', require('ejs').renderFile);
    app.set('view engine', 'html');
};
</code></pre>

<p>Finally add <code>ejs</code> render engine for <code>html</code> page as a dependency</p>

<pre><code class="json package.json">{
    "name": "popcorn-time-backend",
    "version": "0.0.1",
    "dependencies": {
        "express": "4.0.x",
        "ejs": "~0.8.4"
    },
    "devDependencies": {

    }
}
</code></pre>

<h3>1.8 Update Server with Express Configuration</h3>

<p>Update the server requiring the express configuration</p>

<pre><code class="javascript server.js">var express = require('express'),
    app = express();

require('./lib/routes')(app);
require('./lib/config/express')(app);

var server = app.listen(9001, function(){
    console.log('Express server is listening on port %d', server.address().port);
});
</code></pre>

<p>then run <code>npm install</code>, <code>node server.js</code> and check the result in the browser.</p>

<h2>2 Web Application features and Look &amp; Feel</h2>

<p>In this second step some features and look &amp; feel will be added to the web application through</p>

<ul>
<li>Angular the ui framework</li>
<li>Bootstrap the css framework</li>
</ul>


<h3>2.1 Folder Structure</h3>

<pre><code>├── app
│   ├── favicon.ico
│   ├── fonts
│   │   └── Lobster_1.3.otf
│   ├── images
│   │   ├── play.png
│   │   └── popcorn.png
│   ├── package.json                # =&gt; dependency modules of the frontend
│   ├── scripts
│   │   ├── controllers
│   │   │   ├── controllers.js      # =&gt; angular controllers
│   │   │   └── xeditable.min.js    # =&gt; angular xeditable
│   │   ├── directives
│   │   └── services
│   │       └── services.js         # =&gt; angular REST services
│   ├── styles
│   │   ├── style.less              # =&gt; less style sheet
│   │   └── xeditable.css
│   └── views
│       └── index.html              # =&gt; single page of the web application
├── lib
│   ├── config
│   │   └── express.js
│   ├── controllers
│   │   └── index.js
│   └── routes.js
├── package.json
├── popcorn-time-express-angular.iml
└── server.js
</code></pre>

<p>Some folders have been added in order to better organize the frontend code, images, styles and so on.</p>

<h3>2.2 Dependencies Configuration</h3>

<pre><code class="json app/package.json https://github.com/blackat/popcorn-time-express-angular/blob/master/app/package.json">{
    "name": "popcorn-time-frontend",
    "version": "1.0.0",
    "dependencies": {
        "angular": "1.2.x",
        "angular-mocks": "~1.2.x",
        "angular-route": "~1.2.x",
        "angular-resource": "0.1.0",
        "bootstrap": "3.2.x",
        "less": "1.7.x"
    },
    "devDependencies": {

    }
}
</code></pre>

<p>The frontend has a separated file to configure the dependencies from the backend one. <em>Angular</em> and <em>Bootstrap</em> dependencies have been added along with <em>Less</em> in order to resolve <code>*.less</code> style sheet files on the fly.</p>

<h3>2.3 Serve Static Resources</h3>

<pre><code class="javascript lib/config/express.js https://github.com/blackat/popcorn-time-express-angular/blob/master/lib/config/express.js">'use strict';

var path = require('path'),
    express = require('express');

module.exports = function(app) {

    var rootpath = path.normalize(__dirname + '/../..');

    app.use(express.static('app'));
    app.set('views', rootpath + '/app/views');

    app.engine('html', require('ejs').renderFile);
    app.set('view engine', 'html');
};
</code></pre>

<p>Let&rsquo;s add the configuration for the static resources path so they can be referenced from the <code>index.html</code> page.</p>
]]></content>
  </entry>
  
</feed>
