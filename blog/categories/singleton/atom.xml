<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Singleton | Contrast Of Beauty]]></title>
  <link href="http://blackat.github.io/blog/categories/singleton/atom.xml" rel="self"/>
  <link href="http://blackat.github.io/"/>
  <updated>2015-03-09T06:57:39+01:00</updated>
  <id>http://blackat.github.io/</id>
  <author>
    <name><![CDATA[black@t]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Singleton Pattern]]></title>
    <link href="http://blackat.github.io/blog/2013/03/14/singleton-pattern/"/>
    <updated>2013-03-14T20:58:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/14/singleton-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>The Singleton Pattern ensures a class has only one instance and provides a global point of access to it.</p><footer><strong>Bates and Sierra</strong> <cite><a href="http://shop.oreilly.com/product/9780596007126.do">http://shop.oreilly.com/product/9780596007126.do</a> Head First Design Patterns</cite></footer></blockquote></p>

<!-- more -->


<h2>Class Diagram</h2>

<p><img src="/images/posts/design-patterns/singleton.jpg"></p>

<p><code>Singleton</code> is name of the class but also the type of the unique <code>instance</code> variable. The variable is <code>static</code> so it belongs to the class. The method <code>getInstance()</code> is <code>static</code> so can be access using <code>Singleton.getInstance()</code>.</p>

<h2>Key Points</h2>

<ul>
<li><p><strong>Private Constructor.</strong> The class cannot be instantiated.</p></li>
<li><p><strong>Core.</strong> The <code>Singleton</code> class</p>

<ul>
<li>manages the single instance,</li>
<li>prevent other class from creating their instances,</li>
<li>provide a <em>global access</em> point to the instance,</li>
<li>can have its own data and methods.</li>
</ul>
</li>
<li><p><strong>Lazy Initialization.</strong> The instance is created only the first time the method <code>getInstance()</code> is invoked. When the class is loaded by the class loader the instance is not yet created. Beneficial in case of <em>resource intensive objects</em> such as database connection.</p></li>
<li><p><strong>Multiple Class Loaders.</strong> Each class loader defines a <em>namespace</em> so the same class is loaded multiple times. A custom class loader could be define to address the issue.</p></li>
<li><p><strong>No Subclassing.</strong> Due to the <code>private</code> constructor the class cannot be <em>instantiated</em> and <em>subclassed</em>. If the constructor will be changed to public, the parent and the subclasses will share the <em>same instance variable</em>. A <code>static</code> variable means it belongs to the class.</p></li>
<li><p><strong>Garbage Collector 1.2</strong> A curious issue happens in its implementation because the GC collected the singleton without a global reference to them. The <em>only reference</em> to a singleton is the singleton itself.</p></li>
</ul>


<h2>Implementation</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// other data and methods</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Multi-Threaded Application</h2>

<p>The <code>Singleton</code> could be used in a multithreaded environment. Two threads could enter the <code>getInstance()</code> method at the same time. Ensure that each thread waits its turn before entering the method.</p>

<p>Different implementations are feasible in order to address the issue.</p>

<h3>Lazy Implementation</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">istance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// other data and methods</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<strong>Note.</strong> Synchronizing the <code>getInstance()</code> method creates an important overhead for the application, performance can decrease by a factor of 100.</p>

<h3>Eager Implementation</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// other data and methods</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<strong>Note.</strong> The JVM will create an instance of Singleton when the class is loaded. Fine if the application always uses a Singleton instance.</p>

<h3>Double-Checked Locking Implementation</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// other data and methods</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<strong>Note.</strong> Just the creation of the instance is <code>synchronized</code> because the issue comes from a possible concurrent creation and avoid the reduction of the performance. Synchronization happens <em>only</em> the first time the issue has to be created. The <code>volatile</code> keyword</p>

<p>Prior Java5 an out-of-order write may allow the reference to be returned before the object was created. The <code>new</code> operator is not atomic.</p>

<h2>Drawbacks</h2>

<ul>
<li><p><strong>Global state.</strong> Singletons introduce a <em>global state</em> into a program</p>

<ul>
<li>anyone can access to the reference variable provided by Singleton ignoring the scope;</li>
<li>global state state are very difficult to test;</li>
<li>singleton user and singleton class become coupled together so really difficult to test

<ul>
<li><em>solution:</em> pass the singleton as parameter in the client&rsquo;s constructor so the singleton can be mocked</li>
</ul>
</li>
<li>factory class or the client could enforce the singularity eliminating the global state

<ul>
<li><em>issue:</em> violation of the Single Responsibility Principle, the class should take care about its own task and the singularity</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Dependencies.</strong> Singleton can be accessed anywhere thanks to the static method <code>getInstance()</code>, no need to pass the reference variable as parameter.</p>

<ul>
<li><em>issues:</em>

<ul>
<li>the signatures of the methods do not show their dependency anymore, the method could pull a singleton <em>&ldquo;out of thin air&rdquo;</em> [<a href="https://code.google.com/p/google-singleton-detector/wiki/WhySingletonsAreControversial">4</a>];</li>
<li>becomes more difficult to use and test the code, the developer should have a look at the inner code.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Test-driven and Agile Development.</strong> Have small tests covering most of the code</p>

<ul>
<li>test must be run in any order</li>
<li>two test could modify a shared resource that is the singleton</li>
</ul>
</li>
</ul>


<h2>References</h2>

<p>IBM - User Your Singletons Wisely [<a href="http://www.ibm.com/developerworks/webservices/library/co-single/index.html">1</a>]
Portland Pattern Repository - Pages about singleton [<a href="http://c2.com/cgi/wiki?search=Singleton">2</a>]
Portland Pattern Repository - Singletons Are Evil [<a href="http://c2.com/cgi-bin/wiki?SingletonsAreEvil">3</a>]
Google - Why Singletons Are Controversial [<a href="https://code.google.com/p/google-singleton-detector/wiki/WhySingletonsAreControversial">4</a>]
JavaWorld - Simply Singleton [<a href="https://code.google.com/p/google-singleton-detector/wiki/WhySingletonsAreControversial">5</a>]
Interview questions about singleton [<a href="http://javarevisited.blogspot.fr/2011/03/10-interview-questions-on-singleton.html">6</a>]</p>
]]></content>
  </entry>
  
</feed>
