<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fullstack | Contrast Of Beauty]]></title>
  <link href="http://blackat.github.io/blog/categories/fullstack/atom.xml" rel="self"/>
  <link href="http://blackat.github.io/"/>
  <updated>2016-09-11T13:07:12+02:00</updated>
  <id>http://blackat.github.io/</id>
  <author>
    <name><![CDATA[black@t]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fullstack Javascript Web Application Part 1]]></title>
    <link href="http://blackat.github.io/blog/2014/09/09/fullstack-javascript-web-application/"/>
    <updated>2014-09-09T22:13:06+02:00</updated>
    <id>http://blackat.github.io/blog/2014/09/09/fullstack-javascript-web-application</id>
    <content type="html"><![CDATA[<p>The web application will allow the user to manage a list of movies, show them, update them, store new ones and delete existing ones.</p>

<p><img class="center" src="/images/posts/popcorn-time-screenshot.png"></p>

<p>This web application will help to show how to structure a full stack Javascript web application and which components are required to make it work.</p>

<p>The application will start simple and step by step components will be added such as the database, the testing framework, the task runner and the dependency management.</p>

<!-- more -->


<h2>1. Single Page Web Application Scaffolding</h2>

<p>As first step the web application will be composed by</p>

<ul>
<li>Node.js the web server</li>
<li>Express the web framework</li>
</ul>


<h3>1.1 Folder structure</h3>

<p>The starting point is the folder structure to organize resources and configuration files.</p>

<pre><code>├── app
│   └── views
│       └── index.html              # =&gt; single page of the web application
├── lib
│   ├── config
│   │   └── express.js      # =&gt; configuration file for expressjs framework
│   ├── controllers
│   │   └── index.js        # =&gt; controller to serve the starting page
│   └── routes.js           # =&gt; router to map REST request with controller
├── package.json            # =&gt; set of required nodeJs modules
└── server.js               # =&gt; boostrap of the server side
</code></pre>

<h3>1.2 Express Dependency</h3>

<pre><code class="json">{
    "name": "popcorn-time-backend",
    "version": "0.0.1",
    "dependencies": {
        "express": "4.0.x"
    },
    "devDependencies": {

    }
}
</code></pre>

<p><strong>Express</strong> is a web application framework for <strong>Node.js</strong> used to develop web application totally written in Javascript. The framework provides <em>high level methods</em> way to manage requests mapping a route with the designated controller able to provide data.</p>

<p>In the <code>package.json</code> file add the dependency on the web framework. This file is used by <code>npm</code> to store metadata of projects published as npm module and to easily installed them locally running the command <code>npm install</code>.</p>

<h3>1.3 Server Configuration</h3>

<pre><code class="javascript">var express = require('express'),
    app = express();

app.get('/', function(req, res) {
    res.send("Hello World")
});

var server = app.listen(9001, function() {
    console.log('Express server is listening on port %d', server.address().port);
});
</code></pre>

<p><strong>Express</strong> module is loaded by <code>require('express')</code> then a new application instance is created invoking <code>express()</code>.</p>

<p>Defined a route via</p>

<ul>
<li><code>app.VERB</code> method, where <code>VERB</code> stands for <code>HTTP VERB</code>. In the example <code>GET</code> is the verb;</li>
<li><code>/</code> the <code>URL</code> the route is mapped to;</li>
<li>a function implementation to manage request and response.</li>
</ul>


<p>Finally <em>bind</em> and <em>listen</em> for connection invoking method <code>app.listen()</code>.</p>

<h3>1.4 First Run of the Application</h3>

<p>Run <code>npm install</code> in the command line to locally install the declared dependencies. Once done type <code>node server.js</code>, open a browser and hit <code>http://localhost:9001</code>.</p>

<h3>1.5 Separate Express routes</h3>

<pre><code class="javascript lib/routes.js">module.exports = function(app) {

    app.route('/').get(function(req, res, next){
        res.send('Hello World');
    });
};
</code></pre>

<p>Express 4.0 has introduced the <code>app.route()</code> <a href="http://expressjs.com/4x/api.html#app.route" title="Express route method">method</a> which is the recommended approach to handle HTTP verbs. Routes are in a separated files which is loaded by <code>server.js</code> as follows.</p>

<pre><code class="javascript server.js">var express = require('express'),
    app = express();

require('./lib/routes')(app);

var server = app.listen(9001, function(){
    console.log('Express server is listening on port %d', server.address().port);
});
</code></pre>

<h3>1.6 Return index.html</h3>

<pre><code class="javascript lib/routes.js">var index = require('./controllers');

module.exports = function(app) {

    app.route('/').get(index.index);
};
</code></pre>

<p>The <code>html</code> page will give the life to the single page web application. The function calls the <code>index</code> controller method called <code>index</code> which returns the page as follows:</p>

<pre><code class="javascript lib/controllers/index.js">exports.index = function(req, res) {
    res.render('index');
}
</code></pre>

<p>Then the <code>html</code> page to be returned</p>

<pre><code class="html app/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head lang="en"&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Popcorn Time&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Popcorn Time&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>1.7 Express Configuration and the Render Engine</h3>

<p>The <code>index.html</code> page cannot still be found by express. Configure the web framework to render and serve views from a given folder.</p>

<pre><code class="javascript lib/config/express.js">var path = require('path');

module.exports = function(app) {

    var rootpath = path.normalize(__dirname + '/../..');

    app.set('views', rootpath + '/app/views');

    app.engine('html', require('ejs').renderFile);
    app.set('view engine', 'html');
};
</code></pre>

<p>Finally add <code>ejs</code> render engine for <code>html</code> page as a dependency</p>

<pre><code class="json package.json">{
    "name": "popcorn-time-backend",
    "version": "0.0.1",
    "dependencies": {
        "express": "4.0.x",
        "ejs": "~0.8.4"
    },
    "devDependencies": {

    }
}
</code></pre>

<h3>1.8 Update Server with Express Configuration</h3>

<p>Update the server requiring the express configuration</p>

<pre><code class="javascript server.js">var express = require('express'),
    app = express();

require('./lib/routes')(app);
require('./lib/config/express')(app);

var server = app.listen(9001, function(){
    console.log('Express server is listening on port %d', server.address().port);
});
</code></pre>

<p>then run <code>npm install</code>, <code>node server.js</code> and check the result in the browser.</p>

<h2>2 Web Application features and Look &amp; Feel</h2>

<p>In this second step some features and look &amp; feel will be added to the web application through</p>

<ul>
<li>Angular the ui framework</li>
<li>Bootstrap the css framework</li>
</ul>


<h3>2.1 Folder Structure</h3>

<pre><code>├── app
│   ├── favicon.ico
│   ├── fonts
│   │   └── Lobster_1.3.otf
│   ├── images
│   │   ├── play.png
│   │   └── popcorn.png
│   ├── package.json                # =&gt; dependency modules of the frontend
│   ├── scripts
│   │   ├── controllers
│   │   │   ├── controllers.js      # =&gt; angular controllers
│   │   │   └── xeditable.min.js    # =&gt; angular xeditable
│   │   ├── directives
│   │   └── services
│   │       └── services.js         # =&gt; angular REST services
│   ├── styles
│   │   ├── style.less              # =&gt; less style sheet
│   │   └── xeditable.css
│   └── views
│       └── index.html              # =&gt; single page of the web application
├── lib
│   ├── config
│   │   └── express.js
│   ├── controllers
│   │   └── index.js
│   └── routes.js
├── package.json
├── popcorn-time-express-angular.iml
└── server.js
</code></pre>

<p>Some folders have been added in order to better organize the frontend code, images, styles and so on.</p>

<h3>2.2 Dependencies Configuration</h3>

<pre><code class="json app/package.json https://github.com/blackat/popcorn-time-express-angular/blob/master/app/package.json">{
    "name": "popcorn-time-frontend",
    "version": "1.0.0",
    "dependencies": {
        "angular": "1.2.x",
        "angular-mocks": "~1.2.x",
        "angular-route": "~1.2.x",
        "angular-resource": "0.1.0",
        "bootstrap": "3.2.x",
        "less": "1.7.x"
    },
    "devDependencies": {

    }
}
</code></pre>

<p>The frontend has a separated file to configure the dependencies from the backend one. <em>Angular</em> and <em>Bootstrap</em> dependencies have been added along with <em>Less</em> in order to resolve <code>*.less</code> style sheet files on the fly.</p>

<h3>2.3 Serve Static Resources</h3>

<pre><code class="javascript lib/config/express.js https://github.com/blackat/popcorn-time-express-angular/blob/master/lib/config/express.js">'use strict';

var path = require('path'),
    express = require('express');

module.exports = function(app) {

    var rootpath = path.normalize(__dirname + '/../..');

    app.use(express.static('app'));
    app.set('views', rootpath + '/app/views');

    app.engine('html', require('ejs').renderFile);
    app.set('view engine', 'html');
};
</code></pre>

<p>Let&rsquo;s add the configuration for the static resources path so they can be referenced from the <code>index.html</code> page.</p>
]]></content>
  </entry>
  
</feed>
