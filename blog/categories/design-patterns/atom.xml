<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Patterns | Contrast Of Beauty]]></title>
  <link href="http://blackat.github.io/blog/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://blackat.github.io/"/>
  <updated>2015-06-22T07:29:01+02:00</updated>
  <id>http://blackat.github.io/</id>
  <author>
    <name><![CDATA[black@t]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Command Pattern]]></title>
    <link href="http://blackat.github.io/blog/2013/03/28/command-pattern/"/>
    <updated>2013-03-28T18:26:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/28/command-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>The Command Pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations.</p><footer><strong>Bates and Sierra</strong> <cite><a href="http://shop.oreilly.com/product/9780596007126.do">http://shop.oreilly.com/product/9780596007126.do</a> Head First Design Patterns</cite></footer></blockquote></p>

<!-- more -->


<h2>Class diagram</h2>

<p><img src="/images/posts/design-patterns/command_pattern.png"></p>

<ul>
<li><code>Client</code> creates the <code>ConcreteCommand</code> and sets its <code>Receiver</code>.</li>
<li><code>Receiver</code> knows how to perform the work to carry out the request.</li>
<li><code>ConcreteCommand</code> defines a binding between an action and a <code>Receiver</code>.</li>
<li><code>Invoker</code> makes a request calling <em>execute()</em> method, the <code>ConcreteCommand</code> carries the request out calling one or more actions on the <code>Receiver</code>.</li>
</ul>


<h2>Key Points</h2>

<h2>Command in Action</h2>

<p><strong>Scenario.</strong> The idea is to implement a remote to control different devices in a house such as the lights, the gate, the door of the garage and so on. Imagine to have a remote having different buttons and to be able to connect to each button a device.</p>

<p>Each device could work in a different way from the others, a gate opens and closes, the light turn on and off. Idea is to abstract from the specific action to be performed and having a common interface.</p>

<h3>Command interface</h3>

<p>This interface must be implemented by a command object which <em>wraps</em> the <code>Receiver</code> and collect some action over it in the <code>execute()</code> method.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Receiver</h3>

<p>The light is the <code>Receiver</code> of the <em>request</em>, it is the device produced by a <em>specific vendor</em>. It has a specific interface which describes, through the methods, the possible behavior of the device.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Light</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">on</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">on</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">on</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">off</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">on</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Concrete Command</h3>

<p>The <code>LightCommand</code> is a <em>wrapper</em> for the <code>Receiver</code>, the device the request has to be delegated to. The method <code>execute()</code> group a set of action which will be invoked over the <code>Receiver</code>.</p>

<p>In general a command represent a specific action on a device such as turn on or turn off the light. Each command is then assign to a button on the remote.</p>

<p>The <em>command object</em> encapsulate a request of a device, it is used to make requests, each request will be delegated to the wrapped <code>Receiver</code>.
This class is a <em>command</em> and could be implemented by the vendor with specific actions for the controlled device.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LightOnCommand</span> <span class="kd">implements</span> <span class="n">Command</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Light</span> <span class="n">light</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">LightCommand</span><span class="o">(</span><span class="n">Light</span> <span class="n">light</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">light</span> <span class="o">=</span> <span class="n">light</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">light</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Another command to be assigned to another button.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LightOffCommand</span> <span class="kd">implements</span> <span class="n">Command</span><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// same code</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">light</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Invoker</h3>

<p>The <code>RemoteControl</code> class is the <code>Invoker</code> which, in this case, has only one button as stated by the <code>slot</code> variable, able to <em>hold a device to control</em>. When the <code>Client</code> presses the button, the method <code>buttonPressed()</code> is invoked.</p>

<p>The <code>Invoker</code> manages the command objects, one per button. In this case there is only one button.</p>

<p>The client is decoupled from the specific device interface, he doesn&rsquo;t have to know the details of the device that is how to turn on or of the light, he has just to press a button.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteControl</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Command</span> <span class="n">slot</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCommand</span><span class="o">(</span><span class="n">Command</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">slot</span> <span class="o">=</span> <span class="n">command</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">buttonPressed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">slot</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Client</h3>

<p>The client prepare the remote to be used loading command objects in the specific slots. Each command object encapsulate a request of a device.
doesn&rsquo;t use the device, that is the <code>Receviver</code>, directly but through the <code>Invoker</code> which is the remote control.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// invoker</span>
</span><span class='line'>        <span class="n">RemoteControl</span> <span class="n">remoteControl</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">RemoteControl</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c1">// receiver</span>
</span><span class='line'>    <span class="n">Light</span> <span class="n">light</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Light</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create a command and pass the receiver</span>
</span><span class='line'>    <span class="n">Command</span> <span class="n">command</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">LightCommand</span><span class="o">(</span><span class="n">light</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// pass the command to the invoker</span>
</span><span class='line'>    <span class="n">remoteControl</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// press the button</span>
</span><span class='line'>    <span class="n">remoteControl</span><span class="o">.</span><span class="na">buttonPressed</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Template Pattern]]></title>
    <link href="http://blackat.github.io/blog/2013/03/26/template-pattern/"/>
    <updated>2013-03-26T01:00:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/26/template-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>The Template Method Pattern defines the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm&rsquo;s structure.</p><footer><strong>Bates and Sierra</strong> <cite><a href="http://shop.oreilly.com/product/9780596007126.do">http://shop.oreilly.com/product/9780596007126.do</a> Head First Design Patterns</cite></footer></blockquote></p>

<!-- more -->


<h2>Class diagram</h2>

<p><img src="/images/posts/design-patterns/template_method.png"></p>

<p>The abstract class contains the <em>template method</em> and <em>abstract</em> versions of the operations used in the template method. Each method, abstract or concrete, is a step of an algorithm which could varies.</p>

<p>The template methods use the <code>primitiveOperations</code> to implement an algorithm <em>decoupling</em> from the actual implementation of these operations.</p>

<p>The concrete class implements all the abstract operations called by the template method.</p>

<h2>Design Principle</h2>

<p><a href="/oo-design-principles/index.html#hollywood_principle">The Hollywood Principle.</a></p>

<h2>Scenario</h2>

<p>An algorithm is made of steps useful to accomplish some tasks. It can be imagined as a recipe which is a set of instruction to prepare a dish. Some recipes could have some instructions in common so it should be better to avoid <em>code duplication</em>.</p>

<h2>Key Points</h2>

<ul>
<li><strong>Template method.</strong> It defines the skeleton of an algorithm <em>deferring</em> some steps to subclasses. It lets subclasses <em>redefine</em> some steps without changing the algorithm&rsquo;s structure.</li>
<li><strong>Abstract class.</strong>_

<ul>
<li>It is a template of methods for an algorithm which could implemented in slightly different ways in some of the steps.</li>
<li>It is made to be extended and abstract methods to be implemented. So the abstract class collect all the all the <em>common</em> methods or instructions different algorithms.</li>
<li>It reduces the dependencies in the system.</li>
</ul>
</li>
<li><strong>Abstract methods.</strong> They point out that they are just <em>placeholders</em> because they are in common with all the algorithms but their <em>implementation differ</em> from algorithm to algorithm.</li>
<li><strong>Concrete methods.</strong> Concrete meaning that their <em>implementation is the same and in common</em> among algorithms.</li>
<li><strong>Inheritance.</strong> It allows all the subclasses, the <em>algorithms</em>, to have the <em>same behaviors</em> of the superclass, if they are <em>abstract</em> they could change across subclasses.</li>
<li><strong>Interfaces.</strong> They don&rsquo;t have code so <em>no code reuse</em>.</li>
<li><strong>Concrete class.</strong> Concrete implementation is a working algorithm which implements each <em>abstract method</em> and <em>could add some other algorithm specific methods</em>.</li>
<li><strong>Hook methods.</strong>

<ul>
<li>They are concrete methods <em>doing nothing by default</em>, they are <em>optional steps of the algorithm</em> and the subclasses are not obliged to override them. The subclass can hook its own code into the algorithm, <em>an optional part of the algorithm</em>.</li>
<li>They could also be used to <em>conditionally control</em>, using conditional statements, the flow of the algorithm in the abstract class.</li>
</ul>
</li>
</ul>


<h2>Template method vs. Strategy</h2>

<ul>
<li><strong>Focus on</strong>

<ul>
<li>Strategy and Template both encapsulate algorithms, one by <em>inheritance</em> and one by <em>composition</em>.</li>
</ul>
</li>
<li><strong>Template</strong>

<ul>
<li>Define the <em>outline of an algorithm</em> and let my <em>subclasses</em> do some of the work.</li>
<li><em>Keep the control</em> over the algorithm&rsquo;s structure and allow be different implementations of individual steps.</li>
<li>Provide method for <em>code reuse</em> allowing <em>subclasses</em> to specify behavior.</li>
<li>Depend on method implemented in the superclass.</li>
</ul>
</li>
<li><strong>Strategy</strong>

<ul>
<li>Define a <em>family of algorithms</em> and make them <em>interchangeable</em>.</li>
<li>Each algorithm is encapsulated so the client can use different algorithms easily.</li>
<li><em>Not use inheritance</em> for algorithm implementations.</li>
<li>Clients use algorithm implementation through <em>object composition</em>.</li>
<li>Clients can change algorithm at <em>runtime</em> by using different <em>strategy object</em>.</li>
<li>Not depend on any superclass.</li>
</ul>
</li>
</ul>


<h2>Template Method in Action</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Observer Pattern]]></title>
    <link href="http://blackat.github.io/blog/2013/03/25/observer-pattern/"/>
    <updated>2013-03-25T23:25:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/25/observer-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.</p><footer><strong>Bates and Sierra</strong> <cite><a href="http://shop.oreilly.com/product/9780596007126.do">http://shop.oreilly.com/product/9780596007126.do</a> Head First Design Patterns</cite></footer></blockquote></p>

<!-- more -->


<h2>Class diagram</h2>

<p><img src="/images/posts/design-patterns/observer_pattern.png"></p>

<p>Use <code>Subject</code> interface to register or remove an observer. A potential <em>observer</em> must implements the <code>Observer</code> interface, its method will be called when the <em>subject&rsquo;s</em> state changes.</p>

<p>The <code>ConcreteSubject</code> contains and controls the <em>state</em>, it is the sole <em>owner of the data</em>.</p>

<h2>Design Principle</h2>

<p><a href="/oo-design-principles/index.html#loosely_coupled_principle">Loosely Coupled Design Principle.</a></p>

<h2>Scenario</h2>

<p>A news stand produces news during all the day. Each person interested in having news has to subscribe to the stand to get notifications. In this way the person doesn&rsquo;t have to check every time if a new article has been published.</p>

<h2>Key Points</h2>

<ul>
<li><strong>Subject.</strong> It is the observable and updates the observers using a common interface.</li>
<li><strong>Loosely coupled.</strong> Observable doesn&rsquo;t know anything about observers except that they implement an interface.

<ul>
<li>Allow flexible design minimizing the interdependency between objects.</li>
</ul>
</li>
<li><strong>Pull data.</strong> When data changes, observable <em>pull data</em> to the observers.</li>
<li><strong>Order.</strong> There is not any <em>notification order</em>.</li>
<li><strong>Register.</strong> An  observer can register to an observable at any time.</li>
</ul>


<h2>Observer Pattern in Action</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span> <span class="nf">removeObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NewsProvider</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Observer</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">observerList</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">News</span> <span class="n">news</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">NewsProvider</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">observerList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Observer</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">observerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeObserver</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">observerList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Observer</span> <span class="n">o</span> <span class="o">:</span> <span class="n">observerList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">o</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">news</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">setNews</span><span class="o">(</span><span class="n">News</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">news</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>    <span class="n">notifyObservers</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">News</span> <span class="n">news</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NewsObserver</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Subject</span> <span class="n">subject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">NewsObserver</span><span class="o">(</span><span class="n">Subject</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">subject</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="na">registerObserver</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">News</span> <span class="n">news</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;new news published: &quot;</span> <span class="o">+</span> <span class="n">news</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">News</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="nf">News</span><span class="o">(</span><span class="n">String</span> <span class="n">t</span><span class="o">,</span> <span class="n">String</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>    <span class="n">author</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="n">content</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">title</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">author</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NewsStand</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">NewsProvider</span> <span class="n">newsProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NewsProvider</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">Observer</span> <span class="n">userOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NewsObserver</span><span class="o">(</span><span class="n">newsProvider</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Observer</span> <span class="n">userTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NewsObserver</span><span class="o">(</span><span class="n">newsProvider</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">newsProvider</span><span class="o">.</span><span class="na">setNews</span><span class="o">(</span><span class="k">new</span> <span class="nf">News</span><span class="o">(</span><span class="s">&quot;New economy&quot;</span><span class="o">,</span> <span class="s">&quot;Barry Lindon&quot;</span><span class="o">,</span> <span class="s">&quot;Many new changes happened.&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strategy Pattern]]></title>
    <link href="http://blackat.github.io/blog/2013/03/25/strategy-pattern/"/>
    <updated>2013-03-25T20:21:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/25/strategy-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>The Strategy Pattern defines a family of algorithms, encapsulates each one and makes them interchangeable. Strategy lets algorithm vary independently from clients that use it.</p><footer><strong>Bates and Sierra</strong> <cite><a href="http://shop.oreilly.com/product/9780596007126.do">http://shop.oreilly.com/product/9780596007126.do</a> Head First Design Patterns</cite></footer></blockquote></p>

<!-- more -->


<h2>Class diagram</h2>

<p><img src="/images/posts/design-patterns/strategy_pattern.png"></p>

<h2>Design Principles</h2>

<p>Some design principle can help in the definition and explanation of the pattern.</p>

<ul>
<li><strong>Encapsulate what varies.</strong>

<ul>
<li>Encapsulating what varies <em>don&rsquo;t affect</em> other parts of the code when changes.</li>
<li>Because of <em>new requirements</em> some <em>aspects</em> of the application could change quite often. <em>Aspects</em> mean <em>behaviors</em> and they have to be separated from <em>aspects</em> that don&rsquo;t change.</li>
<li>Base scheme for all design patterns, they allow some part of the system to <em>vary independently</em> of all other parts.</li>
</ul>
</li>
<li><strong>Program to an interface, not an implementation.</strong>

<ul>
<li>Decouple the code from a specific implementation.</li>
<li>Allow to change the implementation at runtime.</li>
</ul>
</li>
<li><strong>Favor composition over inheritance.</strong>

<ul>
<li>Better to get behaviors by <em>composition</em> than by <em>inheritance</em>.</li>
<li>Composition gives more <em>flexibility</em>.</li>
<li>Encapsulate family of <em>algorithms or behaviors</em> into their own <em>set of classes</em>.</li>
<li>Allow to change behavior at runtime.</li>
</ul>
</li>
</ul>


<h2>Scenario</h2>

<p>A product could update quite frequently because of new requirements introducing new behavior. Considering a simple class inheritance is the first solution that comes to mind.</p>

<p>A class defines some variables to define the state of an instance and methods to implement behaviors. Focus on behaviors.</p>

<ul>
<li>Subclassing allows to inherit <em>behaviors</em> which could change <em>across subclasses</em>.</li>
<li>Overriding <em>behaviors</em> must be done subclass by subclass.</li>
<li><p>Subclass may inherit useless behaviors.</p>

<p>  So how to improve <em>code reuse</em>, avoid <em>code duplication</em> and make simple the design?</p></li>
</ul>


<h2>Design Principles in Action</h2>

<p>To better design the application apply the design principles explained so far.</p>

<ul>
<li><strong>Encapsulate what varies.</strong>

<ul>
<li>Create one or more <em>set of classes</em> to encapsulate the <em>implementation</em> of their respective <em>behaviors</em>.</li>
<li>Behaviors encapsulated into classes can be <em>reused</em>.</li>
<li>Encapsulation means put a given implementation in a separated class.</li>
<li>Separation and encapsulation allow <em>composition</em>, so <em>behaviors are assigned to instances</em>.</li>
</ul>
</li>
<li><strong>Program to an interface.</strong>

<ul>
<li>Implementation can be defined at runtime, no more specific implementation.</li>
<li>Interfaces are a set of behaviors, some classes exist <em>only to implement a behavior</em>.</li>
<li><strong>Inheritance.</strong> Synonym of <em>concrete implementation</em>. An <em>inherited behavior</em> means concrete implementation from the superclass or the subclass providing a specialized implementation of the behavior.</li>
<li><strong>Interface.</strong> Synonym of a <em>set of behaviors</em>.

<ul>
<li><strong>Program to an abstract supertype.</strong> Program to an interface or abstract class.</li>
<li><strong>Polymorphism.</strong> The <em>runtime object</em> or <em>actual implementation of the behavior</em> is not locked into the client class.</li>
</ul>
</li>
</ul>
</li>
<li><strong>Favorite composition.</strong>

<ul>
<li><strong>HAS-A relation.</strong>

<ul>
<li>It means <em>delegation</em>, a class <em>delegate its behavior</em> to other classes instead of defining them by itself, IS-A.</li>
<li>It is better than IS-A because it avoids to lock the client to a specific implementation and change behaviors at runtime using interfaces.</li>
<li>Behaviors can be <em>changed</em> without affecting the clients, new behaviors can be added without touching the existing ones.</li>
<li>Behaviors can be <em>reused</em> by multiple clients.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Set Behavior Implementation</h2>

<p>The behavior implementation can be set via</p>

<ul>
<li><strong>constructor:</strong> once the class is created the behavior class is set,</li>
<li><strong>setter method:</strong> call the setter any time to change the class behavior on the fly,</li>
<li><strong>mixed:</strong> use the constructor to set a default behavior and the setter to change it at runtime,</li>
<li><strong>subclass:</strong> can define a new constructor.</li>
</ul>


<p><em>Set of behaviors</em> can be seen as a <strong>family of algorithms</strong>.</p>

<h2>Example</h2>

<p><img src="/images/posts/design-patterns/behavior_interface.png"></p>

<p>Composition is realized by defining an interface type variable and then delegating to different set of classes the implementation of the behaviors.</p>

<p><img src="/images/posts/design-patterns/person_class.png"></p>

<p>Behaviors defined by composition are implemented by external classes which exist only for this purpose, so they can change, extended and added without affecting <code>Person</code> class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protection Proxy]]></title>
    <link href="http://blackat.github.io/blog/2013/03/22/protection-proxy-pattern/"/>
    <updated>2013-03-22T19:38:00+01:00</updated>
    <id>http://blackat.github.io/blog/2013/03/22/protection-proxy-pattern</id>
    <content type="html"><![CDATA[<p><blockquote><p>It controls the access to a resource based on access rights.</p></blockquote></p>

<!-- more -->


<p><strong>Scenario.</strong> A proxy <em>controls the access</em> to the real object applying <em>protection</em> to the method calls in a transparent way. The client will invoke methods against the proxy thinking it is the real object.</p>

<p><strong>Java dynamic proxy support.</strong> <code>java.lang.reflect</code> package can be used to create a proxy class <em>on the fly</em>. The <em>proxy class</em> implements one or more interfaces and delegates method invocation to a  specified class, the <em>invoker handler</em>.</p>

<p><strong>Class diagram.</strong> The use of <code>java.lang.reflect</code> package imposes a change in the proxy pattern class diagram.
<img src="/images/posts/design-patterns/protection_proxy.jpg"></p>

<p><strong>Proxy in action.</strong> The handler answers to any method call made by the client on the proxy. The proxy implements <em>the same interface</em> as the real object.</p>

<h2>Example</h2>

<p>A reviewer can only get information about a movie and write comments, he cannot change the title or the actors of the movie.</p>

<h3>Start</h3>

<p>The <code>MovieReviews</code> class simply creates a of two movie proxies, each proxy manages one movie.
Using the <em>static method</em> <code>Proxy.newProxyInstance(Movie.class.getClassLoader(), new Class[]{Movie.class}, forrestGumpHandler);</code> allows the creation of a new proxy <em>on the fly</em> passing:</p>

<ul>
<li>the same class loader of the <code>Movie</code> interface or of the <em>real movie object</em>,</li>
<li>the interface the proxy has to expose,</li>
<li>the handler every method call has to be delegated to, it also <em>wraps</em> the <em>real object</em>.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovieReviews</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">MovieReviews</span><span class="o">().</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Reviewer</span> <span class="n">reviewer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Reviewer</span><span class="o">(</span><span class="n">buildMovieList</span><span class="o">());</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">reviewer</span><span class="o">.</span><span class="na">spoilMovieTitle</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;operation not permitted.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">reviewer</span><span class="o">.</span><span class="na">printMovieTiles</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">buildMovieList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">movieList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">forrestGumpMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MovieImpl</span><span class="o">(</span><span class="s">&quot;Forrest Gump&quot;</span><span class="o">,</span> <span class="s">&quot;Tom Hanks&quot;</span><span class="o">,</span> <span class="s">&quot;Gary Sinise&quot;</span><span class="o">,</span> <span class="s">&quot;Robin Wright&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">InvocationHandler</span> <span class="n">forrestGumpHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">InvocationHandlerImpl</span><span class="o">(</span><span class="n">forrestGumpMovie</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">forrestGumpProxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Movie</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">},</span> <span class="n">forrestGumpHandler</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">djangoMovie</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MovieImpl</span><span class="o">(</span><span class="s">&quot;Django&quot;</span><span class="o">,</span> <span class="s">&quot;Quentin Tarantino&quot;</span><span class="o">,</span> <span class="s">&quot;Jamie Foxx&quot;</span><span class="o">,</span> <span class="s">&quot;Franco Nero&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">InvocationHandler</span> <span class="n">djangoHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">InvocationHandlerImpl</span><span class="o">(</span><span class="n">djangoMovie</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Movie</span> <span class="n">djangoProxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">Movie</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Movie</span><span class="o">.</span><span class="na">class</span><span class="o">},</span> <span class="n">djangoHandler</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">movieList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">forrestGumpProxy</span><span class="o">);</span>
</span><span class='line'>    <span class="n">movieList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">djangoProxy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">movieList</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Interface</h3>

<p>Very simple interface with some getters, setters and the method to comment the movie.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Movie</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">getTitle</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setTitle</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">);</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getActors</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">setActors</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">actors</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">comment</span><span class="o">(</span><span class="n">String</span> <span class="n">comment</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Invocation Handler</h3>

<p>This class will invoke the method, by using <em>reflection</em>, on the <em>real object</em> that is <em>wrapped</em>. The proxy object will create at runtime, so the handler is the only place where the protection logic can be put.</p>

<p>The protection disallow to use any <code>setter</code> method, only <code>getters</code> and <code>comment</code> methods can be invoked.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationTargetException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvocationHandlerImpl</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Movie</span> <span class="n">movie</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">InvocationHandlerImpl</span><span class="o">(</span><span class="n">Movie</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movie</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;set&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalAccessException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;comment&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">movie</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;get&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">movie</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>The Client</h3>

<p>The client will receive the list of the movies which he can write a comment on. From the reviewer point of view every object exposes the <code>Movie</code> interface, so he doesn&rsquo;t know to invoke methods against a proxy object.</p>

<p>Remember, both the proxy and the real movie object implement the <em>same interface</em> so the proxy can <em>take the place</em> of the <em>real object</em>.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Reviewer</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">movieList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Reviewer</span><span class="o">(</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Movie</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">movieList</span> <span class="o">=</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">spoilMovieTitle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Movie</span> <span class="n">movie</span> <span class="o">:</span> <span class="n">movieList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">movie</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;spoiled&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">printMovieTiles</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Movie</span> <span class="n">movie</span> <span class="o">:</span> <span class="n">movieList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">movie</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
